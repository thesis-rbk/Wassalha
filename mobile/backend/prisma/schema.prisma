datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ------------------ ENUMS ------------------ //

enum ReferralSource {
  SOCIAL_MEDIA
  FRIEND_RECOMMENDATION
  APP_STORE
  GOOGLE_SEARCH
  ADVERTISEMENT
  OTHER
}

// Add this new enum for countries
enum Country {
  USA
  CANADA
  UK
  AUSTRALIA
  GERMANY
  FRANCE
  INDIA
  JAPAN
  TUNISIA
  MOROCCO
  ALGERIA
  TURKEY
  SPAIN
  ITALY
  PORTUGAL
  NETHERLANDS
  BELGIUM
  SWEDEN
  NORWAY
  DENMARK
  FINLAND
  ICELAND
  AUSTRIA
  SWITZERLAND
  BELARUS
  RUSSIA
  CHINA
  BRAZIL
  ARGENTINA
  CHILE
  MEXICO
  COLOMBIA
  PERU
  VENEZUELA
  ECUADOR
  PARAGUAY
  URUGUAY
  BOLIVIA
  OTHER // Optional for unspecified countries
}

// Existing enums
enum RequestStatus {
  PENDING
  ACCEPTED
  CANCELLED
  REJECTED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  IN_TRANSIT
  DELIVERED
}

enum OrderSponsorStatus {
  PENDING
  CONFIRMED
  REJECTED
  IN_TRANSIT
  DELIVERED
}

enum PaymentStatus {
  ON_HOLD
  PAYED
  REFUNDED
}

enum PaymentCurrency {
  USD
  EUR
  TND
}

enum PaymentState {
  PENDING
  COMPLETED
  REFUND
  FAILED
  PROCCESSING
}

enum PaymentMethod {
  CARD
  D17
  STRIPE
  PAYPAL
  BANKTRANSFER
}

//credit card and bank transfers

enum PickupType {
  AIRPORT
  IN_PERSON
  PICKUPPOINT
  DELIVERY
}

enum PickupStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  DELAYED
  DELIVERED
}

enum NotificationType {
  REQUEST
  ACCEPTED
  REJECTED
  ORDER_CREATED
  PAYMENT_INITIATED
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  PAYMENT_REFUNDED
  PICKUP_SCHEDULE
  DELIVERY_COMPLETED
  SYSTEM_ALERT
}

enum NotificationStatus {
  READ
  UNREAD
}

enum ReviewType {
  USER_REVIEW
  EXPERIENCE_REVIEW
  DELIVERYMAN_REVIEW
  PICKUPPOINT_REVIEW
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
  EDITED
}

enum SubscriptionType {
  STREAMING
  SOFTWARE
  GAMING
  EDUCATION
  OTHER
}

enum SponsorshipPlatform {
  FACEBOOK
  INSTAGRAM
  YOUTUBE
  TWITTER
  TIKTOK
  OTHER
}

// Existing Profile Gender enum
enum Gender {
  MALE
  FEMALE
}

// ------------------ NEW ENUMS ------------------ //

// Distinguish sponsor vs. subscriber, etc.
enum ServiceProviderType {
  PENDING_SPONSOR
  SPONSOR
  SUBSCRIBER
  // Add other types if needed
}

// Commonly used file extensions
enum FileExtension {
  JPG
  JPEG
  PNG
  GIF
  SVG
  PDF
  DOC
  DOCX
  XLS
  XLSX
  MP4
  MOV
  AVI
  MP3
  WAV
  OTHER
}

// Broad media categories
enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  OTHER
}

// Process statuses for the overall goods process
enum ProcessStatus {
  PREINITIALIZED
  INITIALIZED
  CONFIRMED
  PAID
  IN_TRANSIT
  PICKUP_MEET
  FINALIZED
  CANCELLED
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum TicketCategory {
  REQUEST_ISSUE
  OFFER_ISSUE
  PAYMENT_ISSUE
  PICKUP_ISSUE
  DELIVERY_ISSUE
  TRAVELER_NON_COMPLIANCE
  OTHER
}

// Add TicketStatus enum with the other enums
enum TicketStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

// ------------------ MODELS ------------------ //

// ========== TRAVELER ==========

model Traveler {
  id         Int      @id @default(autoincrement())
  userId     Int      @unique
  idCard     String
  bankCard   String
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

// ========== USER ==========
model User {
  id                     Int       @id @default(autoincrement())
  name                   String
  email                  String    @unique
  phoneNumber            String?
  googleId               String?
  password               String?
  hasCompletedOnboarding Boolean   @default(false)
  role                   Role      @default(USER)
  serviceProviderId      String?
  resetToken             String?
  resetTokenExpiry       DateTime?
  traveler               Traveler?

  requests         Request[]
  notifications    Notification[]
  reviewsGiven     Review[]       @relation("ReviewsGiven")
  reviewsReceived  Review[]       @relation("ReviewsReceived")
  chatsRequested   Chat[]         @relation("ChatsRequested")
  chatsProvided    Chat[]         @relation("ChatsProvided")
  messagesSent     Message[]      @relation("MessagesSent")
  messagesRecieved Message[]      @relation("MessagesRecieved")
  ordersTraveling  Order[]        @relation("TravelerOrders")

  // Subscriptions / Sponsorships
  subscriptions Subscription[] @relation("UserSubscriptions")
  sponsorships  Sponsorship[]  @relation("UserSponsorships")

  // Reputation
  reputation Reputation?

  // Posts
  goodsPosts GoodsPost[]
  promoPosts PromoPost[]

  // If you want to track who changed the process state
  processEvents   ProcessEvent[]   @relation("UserChangedProcessState")
  serviceProvider ServiceProvider?
  profile         Profile?

  pickupSuggestions PickupSuggestion[]

  sentNotifications Notification[] @relation("SentNotifications")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Existing relation to Ticket
  tickets Ticket[]

  // New relation to TicketMessage
  ticketMessagesSent TicketMessage[] @relation("TicketMessagesSent")
  // Add this line

  // Add this relation field
  sponsorshipsCreated Sponsorship[]  @relation("UserSponsorshipsCreated")
  OrderSponsor        OrderSponsor[]

  sponsoredRequests Request[]        @relation("SponsoredRequests")
  CodeSubmission    CodeSubmission[]
}

// ========== PROFILE ==========
model Profile {
  id     Int @id @default(autoincrement())
  userId Int @unique

  firstName   String
  lastName    String
  bio         String?
  country     Country? // Optional field for country
  phoneNumber String?

  // Profile image stored as Media
  imageId Int?   @unique
  image   Media? @relation("ProfileImage", fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  gender Gender?

  isAnonymous         Boolean?        @default(false)
  isBanned            Boolean         @default(false)
  isVerified          Boolean         @default(false)
  isOnline            Boolean         @default(false)
  isSponsor           Boolean         @default(false)
  preferredCategories String?
  referralSource      ReferralSource?

  user                User            @relation(fields: [userId], references: [id])
  reviewerReviews     ReviewSponsor[] @relation("ReviewerReviews")
  reviewedUserReviews ReviewSponsor[] @relation("ReviewedUserReviews")
}

model ReviewSponsor {
  review_id             Int  @id @default(autoincrement())
  reviewer_id           Int
  reviewed_user_id      Int
  sponsorshipRating     Int? // Rating for the Sponsorship (e.g., 1 to 5)
  serviceProviderRating Int? // Rating for the ServiceProvider (e.g., 1 to 5)

  // Relationships to Reviewer and Reviewed User
  reviewer      Profile @relation("ReviewerReviews", fields: [reviewer_id], references: [id])
  reviewed_user Profile @relation("ReviewedUserReviews", fields: [reviewed_user_id], references: [id])

  // Relationships to Sponsorship and ServiceProvider
  sponsorshipId     Int
  serviceProviderId Int? // Optional: ID of the service provider being reviewed
  serviceProvider   ServiceProvider? @relation("ServiceProviderReviews", fields: [serviceProviderId], references: [id], onDelete: Cascade)

  comment   String? // Optional comment for the review
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // One clear relationship to Sponsorship
  Sponsorship Sponsorship @relation(fields: [sponsorshipId], references: [id])
}

// ========== SERVICE PROVIDER ==========
model ServiceProvider {
  id         Int                 @id @default(autoincrement())
  userId     Int                 @unique
  user       User                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  type       ServiceProviderType @default(PENDING_SPONSOR)
  isVerified Boolean             @default(false)
  badge      String?

  // Verification Fields
  idCard               String? // Optional: Government ID
  passport             String? // Optional: Passport Number
  license              String? // Optional: Driving License
  creditCard           String? // Optional: Last 4 digits for security
  selfie               String? // Optional: Selfie
  questionnaireAnswers Json?
  // Example attributes
  subscriptionLevel    String?

  // Sponsorships relation
  sponsorships Sponsorship[]   @relation("ServiceProviderSponsors")
  reviews      ReviewSponsor[] @relation("ServiceProviderReviews")

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  OrderSponsor OrderSponsor[]
}

model SponsorCheckout {
  id             Int             @id @default(autoincrement())
  buyerId        Int // Buyer ID
  cardNumber     String // Card number
  cardExpiryMm   String // Expiry month (MM)
  cardExpiryYyyy String // Expiry year (YYYY)
  cardCvc        String // CVC code
  cardholderName String // Name of cardholder
  amount         Float // Payment amount
  qrCode         String? // Optional: QR code for payment
  paymentUrl     String? // Optional: Payment URL
  currency       PaymentCurrency // Currency of the payment (using the enum)
  status         PaymentState // Payment status
  paymentMethod  PaymentMethod // Payment method (relating to the enum)

  transactionId String? // Transaction ID (nullable)

  // Relation Fields
  sponsorShipId Int
  sponsorship   Sponsorship @relation(fields: [sponsorShipId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ========== GOODS ==========
model Goods {
  id          Int     @id @default(autoincrement())
  name        String
  size        String?
  weight      Float?
  price       Float
  description String?

  // Media reference
  imageId    Int?
  image      Media?  @relation("GoodsImage", fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  goodsUrl   String?
  isVerified Boolean @default(false)

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  requests Request[]
  chats    Chat[]
}

// ========== REQUEST ==========
model Request {
  id        Int    @id @default(autoincrement())
  status    String @default("PENDING")
  sponsorId Int? // Add this field
  userId    Int
  user      User   @relation(fields: [userId], references: [id])

  goodsId Int
  goods   Goods @relation(fields: [goodsId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  quantity         Int
  goodsLocation    String
  goodsDestination String
  pickupId         Int?
  pickup           Pickup? @relation(fields: [pickupId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  date    DateTime
  withBox Boolean  @default(false)

  order         Order?         @relation
  notifications Notification[]

  sponsor        User?            @relation("SponsoredRequests", fields: [sponsorId], references: [id])
  CodeSubmission CodeSubmission[]
}

// ========== ORDER ==========
model Order {
  id        Int     @id @default(autoincrement())
  requestId Int     @unique
  request   Request @relation(fields: [requestId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  travelerId Int
  traveler   User @relation("TravelerOrders", fields: [travelerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  departureDate  DateTime?
  arrivalDate    DateTime?
  trackingNumber String?
  totalAmount    Float?

  paymentStatus PaymentStatus @default(ON_HOLD)
  orderStatus   OrderStatus   @default(PENDING)

  verificationImageId Int?
  verificationImage   Media? @relation("VerificationImage", fields: [verificationImageId], references: [id])

  payment       Payment[]
  pickup        Pickup?
  reviews       Review[]
  notifications Notification[]

  // Link to the high-level goods process
  goodsProcess GoodsProcess?
}

// ========== PAYMENT ==========
model Payment {
  id      Int   @id @default(autoincrement())
  orderId Int
  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  amount        Float
  currency      PaymentCurrency
  status        PaymentState
  paymentMethod PaymentMethod
  transactionId String?
  qrCode        String?
  paymentUrl    String?
}

// ========== PICKUP ==========
model Pickup {
  id      Int   @id @default(autoincrement())
  orderId Int   @unique
  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  pickupType         PickupType
  location           String?
  address            String?
  qrCode             String?
  coordinates        String?
  contactPhoneNumber String?
  travelerconfirmed  Boolean      @default(false)
  userconfirmed      Boolean      @default(false)
  status             PickupStatus @default(SCHEDULED)
  scheduledTime      DateTime?

  requests          Request[]
  notifications     Notification[]
  pickupSuggestions PickupSuggestion[]
}

// ========== NOTIFICATION ==========
model Notification {
  id       Int  @id @default(autoincrement())
  userId   Int
  senderId Int?
  user     User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  type    NotificationType
  title   String?
  message String?            @db.VarChar(1000)
  status  NotificationStatus @default(UNREAD)

  requestId Int?
  request   Request? @relation(fields: [requestId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  orderId Int?
  order   Order? @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  pickupId Int?
  pickup   Pickup? @relation(fields: [pickupId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  sender User? @relation("SentNotifications", fields: [senderId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ========== REVIEW ==========
model Review {
  id Int @id @default(autoincrement())

  reviewerId Int
  reviewer   User @relation("ReviewsGiven", fields: [reviewerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  reviewedId Int
  reviewed   User @relation("ReviewsReceived", fields: [reviewedId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  orderId Int?
  order   Order? @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  rating     Int
  title      String?
  comment    String?
  reviewType ReviewType
  status     ReviewStatus @default(PENDING)
}

// ========== CHAT ==========
model Chat {
  id Int @id @default(autoincrement())

  requesterId Int
  requester   User @relation("ChatsRequested", fields: [requesterId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  providerId Int
  provider   User @relation("ChatsProvided", fields: [providerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  productId Int
  goods     Goods @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  messages Message[]
}

// ========== MESSAGE ==========
model Message {
  id     Int  @id @default(autoincrement())
  chatId Int
  chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  senderId Int
  sender   User @relation("MessagesSent", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  receiverId Int
  receiver   User @relation("MessagesRecieved", fields: [receiverId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  type    String
  content String?
  mediaId Int?
  media   Media?  @relation(fields: [mediaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  isRead  Boolean @default(false)

  time DateTime @default(now()) // Add the time field, defaulting to the current timestamp
}

// ========== MEDIA ==========
model Media {
  id       Int       @id @default(autoincrement())
  url      String
  type     MediaType
  mimeType String?

  extension FileExtension?
  filename  String?
  size      Float?
  width     Int?
  height    Int?
  duration  Int?

  messages       Message[] // Existing relation to chat messages
  profile        Profile?        @relation("ProfileImage")
  goods          Goods[]         @relation("GoodsImage")
  orders         Order[]         @relation("VerificationImage")
  ticketMessages TicketMessage[] @relation("TicketMessageMedia") // Existing relation for ticket messages
  tickets        Ticket[]        @relation("TicketMedia") // New relation for ticket media
}

// ========== CATEGORY ==========
model Category {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  isDisabled  Boolean @default(false)

  goods         Goods[]
  goodsPosts    GoodsPost[]
  promoPosts    PromoPost[]
  subscriptions Subscription[]
  sponsorships  Sponsorship[]
}

// ========== SUBSCRIPTION ==========
model Subscription {
  id          Int              @id @default(autoincrement())
  name        String
  description String?
  price       Float
  duration    Int
  type        SubscriptionType
  categoryId  Int
  category    Category         @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  isActive    Boolean          @default(true)

  users User[] @relation("UserSubscriptions")
}

// ========== SPONSORSHIP ==========
model Sponsorship {
  id          Int                 @id @default(autoincrement())
  description String?
  price       Float
  duration    Int
  platform    SponsorshipPlatform
  categoryId  Int
  category    Category            @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  isActive    Boolean             @default(true)

  // Existing fields
  sponsorId        Int
  sponsor          ServiceProvider   @relation("ServiceProviderSponsors", fields: [sponsorId], references: [id])
  status           String            @default("pending")
  reviewsponsor    ReviewSponsor[] // This links to the ReviewSponsor model
  // Relationships
  users            User[]            @relation("UserSponsorships")
  sponsorCheckouts SponsorCheckout[] @relation
  User             User?             @relation("UserSponsorshipsCreated", fields: [userId], references: [id])
  userId           Int?
  updatedAt        DateTime          @updatedAt
  OrderSponsor     OrderSponsor[]
}

// ========== GOODS POSTS ==========
model GoodsPost {
  id Int @id @default(autoincrement())

  title   String?
  content String?

  travelerId Int
  traveler   User? @relation(fields: [travelerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  departureDate   DateTime?
  arrivalDate     DateTime?
  availableKg     Float?
  originLocation  String?
  airportLocation String?
  phoneNumber     String?

  categoryId Int?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  isPublished Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ========== PROMO POSTS ==========
model PromoPost {
  id Int @id @default(autoincrement())

  title   String
  content String

  publisherId Int
  publisher   User @relation(fields: [publisherId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  categoryId Int?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  isPublished Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ------------------ REPUTATION MODELS ------------------ //

model Reputation {
  id              Int      @id @default(autoincrement())
  userId          Int      @unique
  score           Float    @default(0)
  totalRatings    Int      @default(0)
  positiveRatings Int      @default(0)
  negativeRatings Int      @default(0)
  level           Int      @default(1)
  lastUpdated     DateTime @updatedAt
  createdAt       DateTime @default(now())

  user         User                    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  transactions ReputationTransaction[]

  @@index([score])
  @@index([userId])
}

model ReputationTransaction {
  id           Int      @id @default(autoincrement())
  reputationId Int
  change       Float
  eventType    String // e.g., "REVIEW", "FEEDBACK", "ADMIN_ACTION"
  comment      String?  @db.Text
  createdAt    DateTime @default(now())

  reputation Reputation @relation(fields: [reputationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

// ------------------ GOODS PROCESS MODELS ------------------ //

// Main process manager for an Order's lifecycle
model GoodsProcess {
  id      Int   @id @default(autoincrement())
  orderId Int   @unique
  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  status    ProcessStatus @default(PREINITIALIZED)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  events ProcessEvent[]
}

// Optional audit log for transitions
model ProcessEvent {
  id             Int          @id @default(autoincrement())
  goodsProcessId Int
  goodsProcess   GoodsProcess @relation(fields: [goodsProcessId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  fromStatus ProcessStatus
  toStatus   ProcessStatus

  // If you want to record who changed the status
  changedByUserId Int?
  changedByUser   User? @relation("UserChangedProcessState", fields: [changedByUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  note      String?
  createdAt DateTime @default(now())
}

// Add this new model to your existing schema
model PickupSuggestion {
  id                 Int        @id @default(autoincrement())
  pickupId           Int? // Nullable if suggestion is for a new pickup not yet created
  pickup             Pickup?    @relation(fields: [pickupId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orderId            Int // To link to the order if no pickup exists yet
  userId             Int // The user who made the suggestion
  user               User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pickupType         PickupType
  location           String?
  address            String?
  qrCode             String?
  coordinates        String?
  contactPhoneNumber String?
  scheduledTime      DateTime?
  createdAt          DateTime   @default(now())
}

//sponsorrrrrrrrrrrrrrrrrrrrrrr
model OrderSponsor {
  id                Int                @id @default(autoincrement())
  serviceProviderId Int
  sponsorshipId     Int
  recipientId       Int
  amount            Float
  status            OrderSponsorStatus @default(PENDING)

  serviceProvider ServiceProvider @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sponsorship     Sponsorship     @relation(fields: [sponsorshipId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  recipient       User            @relation(fields: [recipientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

// Add Ticket model before the existing models
model Ticket {
  id          Int            @id @default(autoincrement())
  title       String
  description String         @db.Text
  userId      Int
  status      TicketStatus   @default(PENDING)
  category    TicketCategory // Added to match frontend
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  messages TicketMessage[] @relation("TicketMessages") // Changed to new table
  media    Media[]         @relation("TicketMedia") // New direct relation to Media
}

model TicketMessage {
  id        Int      @id @default(autoincrement())
  ticketId  Int
  ticket    Ticket   @relation("TicketMessages", fields: [ticketId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  senderId  Int
  sender    User     @relation("TicketMessagesSent", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  content   String   @db.Text
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())

  // Adjusted media support: One-to-many relation
  media Media[] @relation("TicketMessageMedia")
}

model CodeSubmission {
  id             Int      @id @default(autoincrement())
  requestId      Int
  sponsorId      Int
  code           String?
  accountDetails String?  @db.Text
  type           String // 'CODE' or 'ACCOUNT'
  status         String // 'SUBMITTED', 'DELIVERED', etc.
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  request        Request  @relation(fields: [requestId], references: [id])
  sponsor        User     @relation(fields: [sponsorId], references: [id])
}
